require 'rake/clean'

PACKAGES = './Packages'
LIB = './lib'

OUTPUT_DIR = %{bin\\WindowsGL\\Debug}

TOP_DOWN_SHOOTER = %{TopDownShooterSpike}
FUTURES = %{TDS.Futures}

CONTENT_ASSETS = '\Content'
CONTENT_BIN = "#{OUTPUT_DIR}\\Content"
CONTENT_COMPILER_EXE = %{"#{LIB}/Content Compiler/bin/XNAContentCompiler.exe"}


CLOBBER.include(PACKAGES, '**/bin/*')
CLEAN.include("**/#{CONTENT_BIN}")

desc 'builds the solution and compiles content'
task :default => ['compile:solution', 'compile:content']

task :futures => ["compile:content[#{FUTURES}]"]

desc 'Watches for content file changes'
task :watch => ['compile:watch']

desc 'builds the solution'
task :build => ['compile:solution']

namespace :compile do

  desc 'compiles content assets'
  task :content, [:project] do |t, args|
    args.with_defaults(:project => 'TopDownShooterSpike')
    puts "Building content for #{args.project}."
    inputPath = %{src\\#{args.project}\\#{CONTENT_ASSETS}}
    outputPath = %{src\\#{args.project}\\#{CONTENT_BIN}}
    content_compile(inputPath, outputPath)
  end

  task :watch do
    sh %{#{CONTENT_COMPILER_EXE} watch #{CONTENT_ASSETS} #{CONTENT_BIN}}
  end

  task :solution do
    # build TopDownShooterSpike
  end

  task :build_dependencies do
    # build all .slns in the lib folder, copy artifacts to /Packages
  end

  def content_compile(input, output)
    system(%{#{CONTENT_COMPILER_EXE} build #{input} #{output}})
  end

end
